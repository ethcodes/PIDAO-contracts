{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0xcc7383006090E13D199F59DB501F530e4D0E913A",
    "txHash": "0x25d018b5bc1e851409ba4ebc034f97965e3f1b38241fd669b81856fbe196097d"
  },
  "proxies": [
    {
      "address": "0xAF8aEC45E9c38895fA91f5CAAaaa0dd7BFE3a892",
      "txHash": "0xe71315d9ddf8ae3341a31418aa8fe4086d2b9cc8978e732f20f6ae87d3c73ac6",
      "kind": "transparent"
    },
    {
      "address": "0x1b3715E743c849B0A52496bcAf8d4a615467613c",
      "txHash": "0x76fdd009363294492064a1bc1453e09398be6aaec4a208008fabc7ee0cf206e9",
      "kind": "transparent"
    },
    {
      "address": "0xf70cbcD9704fC7b678FB8442caC9F2C7BA6373B7",
      "txHash": "0x4ba0f43534db9d4a80468c873b29cf725f835f5e82980d4c667c3f1fa936dd05",
      "kind": "transparent"
    },
    {
      "address": "0xFD5736c93C396ca0B9BCD3cd069eC3c274D68B70",
      "txHash": "0xa13ab0110a0388bcfa562df982961ef6bbf4f0fe436dee328fc77e8132e78207",
      "kind": "transparent"
    },
    {
      "address": "0x9130D9ae3435Fbf05Cb88A6d062774941bF1D77A",
      "txHash": "0x5c223611f42bbb9f49b222c2a8253b4b43f9c77ab4f1a71b9b4497255a7e0200",
      "kind": "transparent"
    },
    {
      "address": "0x1B0aB980E33d5b1Ba8890227763C55f1Be53b3A8",
      "txHash": "0xf4028821793c931fdebbe56dfb99b191c31451fcf094d3c67bae3aa41dab1d17",
      "kind": "transparent"
    },
    {
      "address": "0x0ff0CDe73301989910B887Eaf346cF9E226b49a2",
      "txHash": "0x912ad2e3c9926021e75e8e2644934eea6cde7b0c1dca21c65e0a75b5c517324c",
      "kind": "transparent"
    },
    {
      "address": "0x648DC003D99D0ba2B38137b75115e2BcCB6c8e43",
      "txHash": "0x8715a753c6ca495465c9a519415c8b7d09b8c1cf060b4cb51f02d2786c48ee88",
      "kind": "transparent"
    },
    {
      "address": "0x2813f269124F5CcDF914Dc110a08a913c3191853",
      "txHash": "0x15454e5d6f769f2d9fc4df4d89e393ed9319a7e686977b65f472eee9c3d858c6",
      "kind": "transparent"
    },
    {
      "address": "0xb5594C7F1Af2b7CFE843279fA722dB6655c94880",
      "txHash": "0xa647846dc9b911aba46198a31518b0e5d3c2159855a8985449108960e8253b40",
      "kind": "transparent"
    },
    {
      "address": "0x10dEdAB8D67B38093839fCFF4A152fD07E618d19",
      "txHash": "0x4844c821d0fd4800b91c29fdb3022c744bb6c06db7f4a96b98b9d19a6085e351",
      "kind": "transparent"
    },
    {
      "address": "0x1F3f7BA3999762E05520dD57231E7033C599399A",
      "txHash": "0xe68265e707609d505f37797ab45bbcdf260293cfe450f36ab2de0fc2dfd14292",
      "kind": "transparent"
    },
    {
      "address": "0xA050FBA07a2B4EcE242bB4A00bB88A3d57308b9f",
      "txHash": "0x989c43692bd89b432fa88906f51d31032778b6a379a0d3bb4c0dcf17feebc82f",
      "kind": "transparent"
    },
    {
      "address": "0x22fBB1DdB2b94BfD886133ADCC59FBb7428bedeb",
      "txHash": "0x1687c95438fb09eb01affd4d819d2ae525b083fd3b8fb41928a74e9621bd0b42",
      "kind": "transparent"
    },
    {
      "address": "0x4dbF29Cb3d85DDD2B0afCF99f9f180EE42f73D4F",
      "txHash": "0x4dd3dcab0469495b514d41881a9bd499d09675f54931059ba86535c086de3733",
      "kind": "transparent"
    },
    {
      "address": "0xf7D3B0FA4F9324c9aa2ae4530887B135D85AEd4B",
      "txHash": "0xa00104212331af90246a0270c9edc115a3063e741bf8a0ec208620b8cf6dfe4f",
      "kind": "transparent"
    },
    {
      "address": "0xCe76671Cc90d9f1962eb0251A3EF73f4F15941Cf",
      "txHash": "0x2aab9ca956a3a91bcd5c966a8a143bdd4373f7b6e801e9e92423c7d6947a68ba",
      "kind": "transparent"
    },
    {
      "address": "0xF0D463EA41e58EB2794d12588111498fEbA8DA90",
      "txHash": "0x99e40e1480cb73f75fc4c368416688abe6c363ee00a37da37d5740f83c68b812",
      "kind": "transparent"
    },
    {
      "address": "0xC486b737506788d8dC3dF96ba90b822a1D64db37",
      "txHash": "0xf4a7651f94ed7367f4936a28821948eab0f3f725a570fbc54ac999aea3aaabf2",
      "kind": "transparent"
    },
    {
      "address": "0xBec1634DDE6f8D179A4DF2EC2Ce730ecAcA7cd60",
      "txHash": "0xc9ef34b8164bffb449fce69a9e284fd8faedc2e47bbe10460d366bed3575a3a1",
      "kind": "transparent"
    },
    {
      "address": "0xEd05edB18d42CFE72f362FdA852B58A77febee77",
      "txHash": "0x01a404ac2964e0ffc32c204ff6e5dcfd645261ea5a0e637ed137f4f54ebaa385",
      "kind": "transparent"
    },
    {
      "address": "0x4fe5D399C50b9A27dc8c4e6c9fbB73A78c570D01",
      "txHash": "0x4bef7c5cf7d796fb7e85fc6a73a56804091887e659fd885de4986682acf4abf2",
      "kind": "transparent"
    },
    {
      "address": "0x2245b1D33dd0e4aAB2b79C21ee7a864fC3247a00",
      "txHash": "0x19c1fe8facfc31cb2f983a52b9cb50b7ef0c05c1c3c5d9140d5754f6aadcb06f",
      "kind": "transparent"
    },
    {
      "address": "0x546F27c5aB20fa705C097084A4B10c9FeE2bC41a",
      "txHash": "0x59863c2e41aa9c94709a3bfbe6c96c2d193dd46c1bfbb394a4bbe3c30ae98a53",
      "kind": "transparent"
    },
    {
      "address": "0x7811B5F557E7e82A8f677aECaC03d9F087cFBd50",
      "txHash": "0xa2098279ba6fc02f8af7a498a45e729a13982dcce2b23f3b04009a3440111730",
      "kind": "transparent"
    },
    {
      "address": "0xC2b2ad8523528F48F3F9AEA26c9374e8588e8da1",
      "txHash": "0xb679703838a709e08db2c097d4761d6baeb7e3dfe6999f9b5e526950f315702f",
      "kind": "transparent"
    },
    {
      "address": "0x2CFc0BB9be03a7cc0CEA3672BA977B3be7c1C777",
      "txHash": "0xb0e63c13ab3d4500b9384cc7e73830d86cea48fef456af43d37104eac0a322fd",
      "kind": "transparent"
    },
    {
      "address": "0x7fD9d6C99fE2d1Bbc75f0a791E09373023513b0c",
      "txHash": "0xbcfe51fe5dc0f63f037ff78f44f551c91b11bb4a44cc820ce852fa8d90ecb4c4",
      "kind": "transparent"
    },
    {
      "address": "0x5DA0D1c6DcD955C9f3e310Dc510577a3fD976aE8",
      "txHash": "0x09f4ebf227983a71e2353f2a33ce8bf64b80e268453eee2809229d25503c306a",
      "kind": "transparent"
    },
    {
      "address": "0x749Ae680138c3eaD9Df9957371B9f7D2B2dCc6C6",
      "txHash": "0x8285592ee82cea9887839c0a26b8dcbef62a906f635576eff20cebf272b287b6",
      "kind": "transparent"
    },
    {
      "address": "0xeEBA4164efcE5975b38e86c299A84F317F2EC465",
      "txHash": "0xbed2273037833b825b1eacf244728b35d61d9d384cd3b9639d0bd5a12346874d",
      "kind": "transparent"
    },
    {
      "address": "0xBc9Dbe6f90AfD49Ec2a9f937E9Fd76ac3bD530F5",
      "txHash": "0x2aa187276e34500df74cbb1f9c535344dffe0107395ba4ca533558e4a073c62c",
      "kind": "transparent"
    },
    {
      "address": "0x8D43B5766A8A62D784ECf46bf40CaF5EeF6966FB",
      "txHash": "0x210354996de39fc4a4ad7c69d95d0ae0035d6edbaeb4aedbc3560c12ee62dae6",
      "kind": "transparent"
    },
    {
      "address": "0x8263Cd951e2cbEA6859a54c6Cc03fa55027EA426",
      "txHash": "0x9bdc4e98da40a735870c78371da4021caca37caf24984b497a59f396b0a745ce",
      "kind": "transparent"
    },
    {
      "address": "0x04F1635DbB7b24D1C34CEFe1E56ec298880fb4dB",
      "txHash": "0x237b4d90f3857ea03873a2385783c7d96254a21ddb5e22f32bc68373571eb70b",
      "kind": "transparent"
    },
    {
      "address": "0x966A36B71470D4F9145074676cccE67f060887D9",
      "txHash": "0x4becb7fe7a5c441278d3ea70acf05000bdd66030bd66450066cf819e9f1d757d",
      "kind": "transparent"
    },
    {
      "address": "0xff752c17515d62139Ae6A5d6E75E34C734b66143",
      "txHash": "0xcd8a0a6a4bafb118d1fe848a9ba9559f4f2ac8f6e1e4de6155ffbfffae554444",
      "kind": "transparent"
    },
    {
      "address": "0x524BFda4c56d0001c6ad27d084Aa26B9A647c2bD",
      "txHash": "0xd0a7a0b532602b1e8caafbcc09337d29ef7f3a425a0fc8f32887a915aab8f0c0",
      "kind": "transparent"
    },
    {
      "address": "0x07e7705f07a82657e3BB2d5B8007d5665e6B2D27",
      "txHash": "0x2df5c5619c87ff6b0cbe710f60fb284f72bf3110c1a2b1cebe31fca47a8ddff7",
      "kind": "transparent"
    },
    {
      "address": "0x823032D2CB9cA1d7C18D448c8F737debf170Ab4C",
      "txHash": "0xe84893cf6994e01a6f6cd1959a07b5f53163cdadd6f725bea5438b1966dec43a",
      "kind": "transparent"
    },
    {
      "address": "0x7D35FD7fb39749c71CD0bf31C2d4958aDfAd91C7",
      "txHash": "0x5f76df7f6396a0b3f5e3f37fb3f905b4c63db21b40f8204889f2ed542013ee00",
      "kind": "transparent"
    },
    {
      "address": "0x2BF06Da26446CE462B1Cc5Ca7073cA333b816B91",
      "txHash": "0xaf39ccbe44d7a5baec25a83dfe0aa97a99ad055c5e6e3b71bd72fa50cc111e31",
      "kind": "transparent"
    }
  ],
  "impls": {
    "f58271700218e093791b6869afe96c7ca00817585fbc50d09a2727d8eedd097b": {
      "address": "0x5154DE8b5A20d33832D22043dE9b812ada4469D5",
      "txHash": "0xf917d6307b44b3fd2bb33d01239b277ea58fa7d5b9ebae067bebf07089579cc8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../test/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../test/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../test/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../test/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../test/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../test/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../test/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../test/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../test/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../test/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "../test/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          }
        ],
        "types": {
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "df4bc496d5511fe22141c9525b3b0257750e030a36417f4a81ea3d7103cda428": {
      "address": "0x97b6Eae5bBe88541c021927c8325eA77b2b5c6dc",
      "txHash": "0xed9ef2c02ce8a6bdaf7c9395d91bcfe61550dd3f42c92439e780359a7e2f45bc",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../test/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../test/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../test/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "../test/project:/contracts/NFTToken/ERC165Upgradeable.sol:21"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../test/project:/contracts/NFTToken/ERC165Upgradeable.sol:58"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)2861_storage)",
            "src": "../test/project:/contracts/NFTToken/ERC721Upgradeable.sol:32"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)2158_storage",
            "src": "../test/project:/contracts/NFTToken/ERC721Upgradeable.sol:35"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../test/project:/contracts/NFTToken/ERC721Upgradeable.sol:38"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../test/project:/contracts/NFTToken/ERC721Upgradeable.sol:41"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../test/project:/contracts/NFTToken/ERC721Upgradeable.sol:44"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../test/project:/contracts/NFTToken/ERC721Upgradeable.sol:47"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../test/project:/contracts/NFTToken/ERC721Upgradeable.sol:50"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "../test/project:/contracts/NFTToken/ERC721Upgradeable.sol:53"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)41_storage",
            "src": "../test/project:/contracts/NFTToken/ERC721Upgradeable.sol:459"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../test/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../test/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "TOKEN721",
            "label": "LatestTokenId",
            "type": "t_uint256",
            "src": "../test/project:/contracts/NFTToken/TOKEN721.sol:11"
          },
          {
            "contract": "TOKEN721",
            "label": "Evolver",
            "type": "t_address",
            "src": "../test/project:/contracts/NFTToken/TOKEN721.sol:12"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_struct(UintSet)2861_storage)": {
            "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_struct(UintSet)2861_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)2403_storage"
              }
            ]
          },
          "t_struct(Set)2403_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_struct(UintToAddressMap)2158_storage": {
            "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)1928_storage"
              }
            ]
          },
          "t_struct(Map)1928_storage": {
            "label": "struct EnumerableMapUpgradeable.Map",
            "members": [
              {
                "label": "_keys",
                "type": "t_struct(Bytes32Set)2597_storage"
              },
              {
                "label": "_values",
                "type": "t_mapping(t_bytes32,t_bytes32)"
              }
            ]
          },
          "t_struct(Bytes32Set)2597_storage": {
            "label": "struct EnumerableSetUpgradeable.Bytes32Set",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)2403_storage"
              }
            ]
          },
          "t_mapping(t_bytes32,t_bytes32)": {
            "label": "mapping(bytes32 => bytes32)"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_array(t_uint256)41_storage": {
            "label": "uint256[41]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "7c110ab8bcf88bff37623ebf851f6fdbf7ff82c9f7b22bd863ecef44bade5cf0": {
      "address": "0x83eeeEB7E8FA8E66Df968e8db3D518A478743341",
      "txHash": "0xc46d062617077407539448fad45b5b675325bb51094f1f4903327a227c3289ee",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../test/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../test/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../test/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../test/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../test/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "EvolverStorage",
            "label": "NFT",
            "type": "t_contract(NFTInterface)6467",
            "src": "../test/project:/contracts/Evolver/evolverStorage.sol:9"
          },
          {
            "contract": "EvolverStorage",
            "label": "Config",
            "type": "t_contract(ConfigInterface)6356",
            "src": "../test/project:/contracts/Evolver/evolverStorage.sol:10"
          },
          {
            "contract": "EvolverStorage",
            "label": "MastChef",
            "type": "t_contract(MasterChefInterface)6426",
            "src": "../test/project:/contracts/Evolver/evolverStorage.sol:11"
          },
          {
            "contract": "EvolverStorage",
            "label": "PID",
            "type": "t_uint256",
            "src": "../test/project:/contracts/Evolver/evolverStorage.sol:12"
          },
          {
            "contract": "EvolverStorage",
            "label": "Token",
            "type": "t_address",
            "src": "../test/project:/contracts/Evolver/evolverStorage.sol:14"
          },
          {
            "contract": "EvolverStorage",
            "label": "BuyPrice",
            "type": "t_uint256",
            "src": "../test/project:/contracts/Evolver/evolverStorage.sol:15"
          },
          {
            "contract": "EvolverStorage",
            "label": "Races",
            "type": "t_array(t_string_storage)dyn_storage",
            "src": "../test/project:/contracts/Evolver/evolverStorage.sol:18"
          },
          {
            "contract": "EvolverStorage",
            "label": "Heros",
            "type": "t_mapping(t_string_memory_ptr,t_array(t_string_storage)dyn_storage)",
            "src": "../test/project:/contracts/Evolver/evolverStorage.sol:20"
          },
          {
            "contract": "EvolverStorage",
            "label": "SeedGol",
            "type": "t_uint256",
            "src": "../test/project:/contracts/Evolver/evolverStorage.sol:22"
          },
          {
            "contract": "EvolverStorage",
            "label": "roleAttributes",
            "type": "t_mapping(t_uint256,t_struct(RoleAttributes)5304_storage)",
            "src": "../test/project:/contracts/Evolver/evolverStorage.sol:40"
          },
          {
            "contract": "EvolverStorage",
            "label": "gemPrice",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../test/project:/contracts/Evolver/evolverStorage.sol:43"
          },
          {
            "contract": "EvolverStorage",
            "label": "gemCount",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../test/project:/contracts/Evolver/evolverStorage.sol:45"
          },
          {
            "contract": "EvolverStorage",
            "label": "GEMLOCKTIME",
            "type": "t_uint256",
            "src": "../test/project:/contracts/Evolver/evolverStorage.sol:46"
          },
          {
            "contract": "EvolverStorage",
            "label": "gemLockTime",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../test/project:/contracts/Evolver/evolverStorage.sol:48"
          },
          {
            "contract": "EvolverStorage",
            "label": "battlefieldList",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../test/project:/contracts/Evolver/evolverStorage.sol:49"
          }
        ],
        "types": {
          "t_contract(NFTInterface)6467": {
            "label": "contract NFTInterface"
          },
          "t_contract(ConfigInterface)6356": {
            "label": "contract ConfigInterface"
          },
          "t_contract(MasterChefInterface)6426": {
            "label": "contract MasterChefInterface"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_string_memory_ptr,t_array(t_string_storage)dyn_storage)": {
            "label": "mapping(string => string[])"
          },
          "t_mapping(t_uint256,t_struct(RoleAttributes)5304_storage)": {
            "label": "mapping(uint256 => struct EvolverStorage.RoleAttributes)"
          },
          "t_struct(RoleAttributes)5304_storage": {
            "label": "struct EvolverStorage.RoleAttributes",
            "members": [
              {
                "label": "race",
                "type": "t_string_storage"
              },
              {
                "label": "hero",
                "type": "t_string_storage"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "exp",
                "type": "t_uint256"
              },
              {
                "label": "bornTime",
                "type": "t_uint256"
              },
              {
                "label": "ruby",
                "type": "t_uint256"
              },
              {
                "label": "topaz",
                "type": "t_uint256"
              },
              {
                "label": "sapphire",
                "type": "t_uint256"
              },
              {
                "label": "emerald",
                "type": "t_uint256"
              },
              {
                "label": "isDestroy",
                "type": "t_bool"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "f2251f3c3c8f86a2bb97eaff171ddf501bea4b57c4ab4ac76e2f7ce476f69347": {
      "address": "0xEF3eBEaA3Fa61658669D6ED204bb1caBa6792Ff1",
      "txHash": "0xd52694b8506e1c1a1f698a87744dc8f35bdb97cbf648bc35774fa3a2ba91baea",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../test/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../test/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../test/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../test/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../test/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "MasterChef",
            "label": "gust",
            "type": "t_contract(IERC20Upgradeable)879",
            "src": "../test/project:/contracts/MasterChef/masterChef.sol:52"
          },
          {
            "contract": "MasterChef",
            "label": "nft",
            "type": "t_contract(IERC721Upgradeable)1038",
            "src": "../test/project:/contracts/MasterChef/masterChef.sol:53"
          },
          {
            "contract": "MasterChef",
            "label": "evolver",
            "type": "t_contract(EvolverInterface)6403",
            "src": "../test/project:/contracts/MasterChef/masterChef.sol:54"
          },
          {
            "contract": "MasterChef",
            "label": "bonusEndBlock",
            "type": "t_uint256",
            "src": "../test/project:/contracts/MasterChef/masterChef.sol:57"
          },
          {
            "contract": "MasterChef",
            "label": "gustPerBlock",
            "type": "t_uint256",
            "src": "../test/project:/contracts/MasterChef/masterChef.sol:59"
          },
          {
            "contract": "MasterChef",
            "label": "BONUS_MULTIPLIER",
            "type": "t_uint256",
            "src": "../test/project:/contracts/MasterChef/masterChef.sol:61"
          },
          {
            "contract": "MasterChef",
            "label": "poolInfo",
            "type": "t_array(t_struct(PoolInfo)6508_storage)dyn_storage",
            "src": "../test/project:/contracts/MasterChef/masterChef.sol:64"
          },
          {
            "contract": "MasterChef",
            "label": "userInfo",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)6499_storage))",
            "src": "../test/project:/contracts/MasterChef/masterChef.sol:66"
          },
          {
            "contract": "MasterChef",
            "label": "totalAllocPoint",
            "type": "t_uint256",
            "src": "../test/project:/contracts/MasterChef/masterChef.sol:68"
          },
          {
            "contract": "MasterChef",
            "label": "startBlock",
            "type": "t_uint256",
            "src": "../test/project:/contracts/MasterChef/masterChef.sol:70"
          }
        ],
        "types": {
          "t_contract(IERC20Upgradeable)879": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(IERC721Upgradeable)1038": {
            "label": "contract IERC721Upgradeable"
          },
          "t_contract(EvolverInterface)6403": {
            "label": "contract EvolverInterface"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_struct(PoolInfo)6508_storage)dyn_storage": {
            "label": "struct MasterChef.PoolInfo[]"
          },
          "t_struct(PoolInfo)6508_storage": {
            "label": "struct MasterChef.PoolInfo",
            "members": [
              {
                "label": "supply",
                "type": "t_uint256"
              },
              {
                "label": "allocPoint",
                "type": "t_uint256"
              },
              {
                "label": "lastRewardBlock",
                "type": "t_uint256"
              },
              {
                "label": "accGustPerShare",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)6499_storage))": {
            "label": "mapping(uint256 => mapping(address => struct MasterChef.UserInfo))"
          },
          "t_mapping(t_address,t_struct(UserInfo)6499_storage)": {
            "label": "mapping(address => struct MasterChef.UserInfo)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(UserInfo)6499_storage": {
            "label": "struct MasterChef.UserInfo",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "rewardDebt",
                "type": "t_uint256"
              },
              {
                "label": "NFTs",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "index",
                "type": "t_mapping(t_uint256,t_uint256)"
              }
            ]
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "c0278c8dacb3b9f9a3bc62a76efcf17f8e663fc77b2f09fb553160c2c0815f67": {
      "address": "0x7189E15aBa325bF4C9e2564255F683ddFBDDD665",
      "txHash": "0xacbcb839fd4d50474040c0236fe4fb6d601959c16046783abec54e7dca3c0be8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../test/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../test/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../test/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../test/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../test/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "BattlefieldStorage",
            "label": "MasterChef",
            "type": "t_contract(MasterChefInterface)6426",
            "src": "../test/project:/contracts/Battlefield/battlefieldStorage.sol:7"
          },
          {
            "contract": "BattlefieldStorage",
            "label": "PID",
            "type": "t_uint256",
            "src": "../test/project:/contracts/Battlefield/battlefieldStorage.sol:8"
          },
          {
            "contract": "BattlefieldStorage",
            "label": "SeedGol",
            "type": "t_uint256",
            "src": "../test/project:/contracts/Battlefield/battlefieldStorage.sol:10"
          },
          {
            "contract": "BattlefieldStorage",
            "label": "LockedTime",
            "type": "t_uint256",
            "src": "../test/project:/contracts/Battlefield/battlefieldStorage.sol:11"
          },
          {
            "contract": "BattlefieldStorage",
            "label": "NFT",
            "type": "t_contract(NFTInterface)6467",
            "src": "../test/project:/contracts/Battlefield/battlefieldStorage.sol:12"
          },
          {
            "contract": "BattlefieldStorage",
            "label": "Evolver",
            "type": "t_contract(EvolverInterface)6403",
            "src": "../test/project:/contracts/Battlefield/battlefieldStorage.sol:13"
          },
          {
            "contract": "BattlefieldStorage",
            "label": "Token",
            "type": "t_address",
            "src": "../test/project:/contracts/Battlefield/battlefieldStorage.sol:14"
          },
          {
            "contract": "BattlefieldStorage",
            "label": "Monsters",
            "type": "t_array(t_struct(Monster)3667_storage)dyn_storage",
            "src": "../test/project:/contracts/Battlefield/battlefieldStorage.sol:28"
          },
          {
            "contract": "BattlefieldStorage",
            "label": "BattleLock",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../test/project:/contracts/Battlefield/battlefieldStorage.sol:29"
          },
          {
            "contract": "BattlefieldStorage",
            "label": "RarityLockCount",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../test/project:/contracts/Battlefield/battlefieldStorage.sol:31"
          },
          {
            "contract": "BattlefieldStorage",
            "label": "UserBattleRecord",
            "type": "t_mapping(t_address,t_array(t_struct(BattleRecord)3690_storage)dyn_storage)",
            "src": "../test/project:/contracts/Battlefield/battlefieldStorage.sol:40"
          }
        ],
        "types": {
          "t_contract(MasterChefInterface)6426": {
            "label": "contract MasterChefInterface"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(NFTInterface)6467": {
            "label": "contract NFTInterface"
          },
          "t_contract(EvolverInterface)6403": {
            "label": "contract EvolverInterface"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_struct(Monster)3667_storage)dyn_storage": {
            "label": "struct BattlefieldStorage.Monster[]"
          },
          "t_struct(Monster)3667_storage": {
            "label": "struct BattlefieldStorage.Monster",
            "members": [
              {
                "label": "isOpen",
                "type": "t_bool"
              },
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "level",
                "type": "t_uint256"
              },
              {
                "label": "difficulty",
                "type": "t_uint256"
              },
              {
                "label": "awardMax",
                "type": "t_uint256"
              },
              {
                "label": "awardMin",
                "type": "t_uint256"
              },
              {
                "label": "experienceMax",
                "type": "t_uint256"
              },
              {
                "label": "experienceMin",
                "type": "t_uint256"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_array(t_struct(BattleRecord)3690_storage)dyn_storage)": {
            "label": "mapping(address => struct BattlefieldStorage.BattleRecord[])"
          },
          "t_array(t_struct(BattleRecord)3690_storage)dyn_storage": {
            "label": "struct BattlefieldStorage.BattleRecord[]"
          },
          "t_struct(BattleRecord)3690_storage": {
            "label": "struct BattlefieldStorage.BattleRecord",
            "members": [
              {
                "label": "tokenID",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              },
              {
                "label": "result",
                "type": "t_string_storage"
              },
              {
                "label": "exp",
                "type": "t_uint256"
              },
              {
                "label": "time",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "c512fcb3ced426239c42fa334c42f95e8bc0820080f446bb537f5a9a6ba5cf40": {
      "address": "0xF78DFc3BA0e815837060349E011831De55416D4F",
      "txHash": "0xe55af3459cea8de58eb2341857642d7ae4c1cb77848b538b5918ef431df02b35",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../test/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../test/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../test/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../test/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../test/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "NFTExchangeStorage",
            "label": "NFT",
            "type": "t_address",
            "src": "../test/project:/contracts/Exchange/exchangeStorage.sol:6"
          },
          {
            "contract": "NFTExchangeStorage",
            "label": "Token",
            "type": "t_address",
            "src": "../test/project:/contracts/Exchange/exchangeStorage.sol:7"
          },
          {
            "contract": "NFTExchangeStorage",
            "label": "BuyFee",
            "type": "t_uint256",
            "src": "../test/project:/contracts/Exchange/exchangeStorage.sol:9"
          },
          {
            "contract": "NFTExchangeStorage",
            "label": "SellFee",
            "type": "t_uint256",
            "src": "../test/project:/contracts/Exchange/exchangeStorage.sol:10"
          },
          {
            "contract": "NFTExchangeStorage",
            "label": "markets",
            "type": "t_array(t_struct(Market)6223_storage)dyn_storage",
            "src": "../test/project:/contracts/Exchange/exchangeStorage.sol:19"
          },
          {
            "contract": "NFTExchangeStorage",
            "label": "userMarket",
            "type": "t_mapping(t_address,t_array(t_struct(Market)6223_storage)dyn_storage)",
            "src": "../test/project:/contracts/Exchange/exchangeStorage.sol:20"
          },
          {
            "contract": "NFTExchangeStorage",
            "label": "NFTexchangeRecord",
            "type": "t_mapping(t_uint256,t_array(t_struct(ExchangeRecord)6244_storage)dyn_storage)",
            "src": "../test/project:/contracts/Exchange/exchangeStorage.sol:29"
          },
          {
            "contract": "NFTExchangeStorage",
            "label": "GlobalExchangeRecord",
            "type": "t_array(t_struct(ExchangeRecord)6244_storage)dyn_storage",
            "src": "../test/project:/contracts/Exchange/exchangeStorage.sol:30"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "../test/@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../test/@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_struct(Market)6223_storage)dyn_storage": {
            "label": "struct NFTExchangeStorage.Market[]"
          },
          "t_struct(Market)6223_storage": {
            "label": "struct NFTExchangeStorage.Market",
            "members": [
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "price",
                "type": "t_uint256"
              },
              {
                "label": "index",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_array(t_struct(Market)6223_storage)dyn_storage)": {
            "label": "mapping(address => struct NFTExchangeStorage.Market[])"
          },
          "t_mapping(t_uint256,t_array(t_struct(ExchangeRecord)6244_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct NFTExchangeStorage.ExchangeRecord[])"
          },
          "t_array(t_struct(ExchangeRecord)6244_storage)dyn_storage": {
            "label": "struct NFTExchangeStorage.ExchangeRecord[]"
          },
          "t_struct(ExchangeRecord)6244_storage": {
            "label": "struct NFTExchangeStorage.ExchangeRecord",
            "members": [
              {
                "label": "tokenID",
                "type": "t_uint256"
              },
              {
                "label": "from",
                "type": "t_address"
              },
              {
                "label": "to",
                "type": "t_address"
              },
              {
                "label": "price",
                "type": "t_uint256"
              },
              {
                "label": "time",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    }
  }
}
